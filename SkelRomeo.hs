module SkelRomeo where

-- Haskell module generated by the BNF converter

import AbsRomeo
import ErrM
type Result = Err String

failure :: Show a => a -> Result
failure x = Bad $ "Undefined case: " ++ show x

transIdent :: Ident -> Result
transIdent x = case x of
  Ident string -> failure x
transProgram :: Show a => Program a -> Result
transProgram x = case x of
  Prog _ stmts -> failure x
transStmt :: Show a => Stmt a -> Result
transStmt x = case x of
  Empty _ -> failure x
  Ass _ ident asg expr -> failure x
  Cond _ expr stmts elifs -> failure x
  CondElse _ expr stmts1 elifs stmts2 -> failure x
  While _ expr stmts -> failure x
  For _ ident expr1 expr2 stmts -> failure x
  ForIn _ ident1 ident2 stmts -> failure x
  Break _ -> failure x
  Cont _ -> failure x
  Func _ ident idents stmts -> failure x
  Ret _ expr -> failure x
  VRet _ -> failure x
  Yeld _ expr -> failure x
  Print _ expr -> failure x
transItem :: Show a => Item a -> Result
transItem x = case x of
  Init _ ident expr -> failure x
transElIfs :: Show a => ElIfs a -> Result
transElIfs x = case x of
  CondElIfs _ elif elifs -> failure x
  NilElif _ -> failure x
transElIf :: Show a => ElIf a -> Result
transElIf x = case x of
  CondElIf _ expr stmts -> failure x
transList :: Show a => List a -> Result
transList x = case x of
  Lis1 _ exprs -> failure x
  Lis2 _ expr1 expr2 -> failure x
  Lis3 _ expr1 ident expr2 expr3 -> failure x
  Lis4 _ expr ident1 ident2 -> failure x
transExpr :: Show a => Expr a -> Result
transExpr x = case x of
  EVar _ ident -> failure x
  ELitInt _ integer -> failure x
  ELitLis _ list -> failure x
  ELitTrue _ -> failure x
  ELitFalse _ -> failure x
  EApp _ ident exprs -> failure x
  EGen _ ident -> failure x
  ETake _ ident -> failure x
  ESlice _ ident expr1 expr2 -> failure x
  EAnon _ idents expr -> failure x
  EString _ string -> failure x
  EElem _ ident expr -> failure x
  Neg _ expr -> failure x
  Not _ expr -> failure x
  Pow _ expr1 expr2 -> failure x
  EMul _ expr1 expr2 -> failure x
  EDiv _ expr1 expr2 -> failure x
  EMod _ expr1 expr2 -> failure x
  EAdd _ expr1 expr2 -> failure x
  ESub _ expr1 expr2 -> failure x
  ERel _ expr1 relop expr2 -> failure x
  EAnd _ expr1 expr2 -> failure x
  EOr _ expr1 expr2 -> failure x
transAsg :: Show a => Asg a -> Result
transAsg x = case x of
  Eq _ -> failure x
  PlEq _ -> failure x
  MnEq _ -> failure x
  MulEq _ -> failure x
  DivEq _ -> failure x
  PowEq _ -> failure x
transAddOp :: Show a => AddOp a -> Result
transAddOp x = case x of
  Plus _ -> failure x
  Minus _ -> failure x
transMulOp :: Show a => MulOp a -> Result
transMulOp x = case x of
  Times _ -> failure x
  Div _ -> failure x
  Mod _ -> failure x
transRelOp :: Show a => RelOp a -> Result
transRelOp x = case x of
  LTH _ -> failure x
  LE _ -> failure x
  GTH _ -> failure x
  GE _ -> failure x
  EQU _ -> failure x
  NE _ -> failure x

