-- This Happy file was machine-generated by the BNF converter
{
{-# OPTIONS_GHC -fno-warn-incomplete-patterns -fno-warn-overlapping-patterns #-}
module ParRomeo where
import AbsRomeo
import LexRomeo
import ErrM

}

%name pProgram Program
-- no lexer declaration
%monad { Err } { thenM } { returnM }
%tokentype {Token}
%token
  '!' { PT _ (TS _ 1) }
  '!=' { PT _ (TS _ 2) }
  '%' { PT _ (TS _ 3) }
  '&&' { PT _ (TS _ 4) }
  '(' { PT _ (TS _ 5) }
  ')' { PT _ (TS _ 6) }
  '*' { PT _ (TS _ 7) }
  '*=' { PT _ (TS _ 8) }
  '+' { PT _ (TS _ 9) }
  '+=' { PT _ (TS _ 10) }
  ',' { PT _ (TS _ 11) }
  '-' { PT _ (TS _ 12) }
  '-=' { PT _ (TS _ 13) }
  '->' { PT _ (TS _ 14) }
  '/' { PT _ (TS _ 15) }
  '/=' { PT _ (TS _ 16) }
  ':' { PT _ (TS _ 17) }
  ';' { PT _ (TS _ 18) }
  '<' { PT _ (TS _ 19) }
  '<=' { PT _ (TS _ 20) }
  '=' { PT _ (TS _ 21) }
  '==' { PT _ (TS _ 22) }
  '>' { PT _ (TS _ 23) }
  '>=' { PT _ (TS _ 24) }
  'False' { PT _ (TS _ 25) }
  'True' { PT _ (TS _ 26) }
  'Yield' { PT _ (TS _ 27) }
  '[' { PT _ (TS _ 28) }
  ']' { PT _ (TS _ 29) }
  '^' { PT _ (TS _ 30) }
  '^=' { PT _ (TS _ 31) }
  'apply' { PT _ (TS _ 32) }
  'break' { PT _ (TS _ 33) }
  'continue' { PT _ (TS _ 34) }
  'else' { PT _ (TS _ 35) }
  'elseif' { PT _ (TS _ 36) }
  'end' { PT _ (TS _ 37) }
  'for' { PT _ (TS _ 38) }
  'function' { PT _ (TS _ 39) }
  'generator' { PT _ (TS _ 40) }
  'if' { PT _ (TS _ 41) }
  'in' { PT _ (TS _ 42) }
  'println' { PT _ (TS _ 43) }
  'return' { PT _ (TS _ 44) }
  'take' { PT _ (TS _ 45) }
  'while' { PT _ (TS _ 46) }
  '{' { PT _ (TS _ 47) }
  '||' { PT _ (TS _ 48) }
  '}' { PT _ (TS _ 49) }

L_ident  { PT _ (TV $$) }
L_integ  { PT _ (TI $$) }
L_quoted { PT _ (TL $$) }


%%

Ident   :: { Ident }   : L_ident  { Ident $1 }
Integer :: { Integer } : L_integ  { (read ( $1)) :: Integer }
String  :: { String }  : L_quoted {  $1 }

Program :: { (Program ()) }
Program : ListStmt { AbsRomeo.Prog () (reverse $1) }
ListStmt :: { [Stmt ()] }
ListStmt : {- empty -} { [] } | ListStmt Stmt { flip (:) $1 $2 }
Stmt :: { (Stmt ()) }
Stmt : ';' { AbsRomeo.Empty () }
     | Ident Asg Expr ';' { AbsRomeo.Ass () $1 $2 $3 }
     | 'if' Expr ListStmt ElIfs 'end' { AbsRomeo.Cond () $2 (reverse $3) $4 }
     | 'if' Expr ListStmt ElIfs 'else' ListStmt 'end' { AbsRomeo.CondElse () $2 (reverse $3) $4 (reverse $6) }
     | 'while' Expr ListStmt 'end' { AbsRomeo.While () $2 (reverse $3) }
     | 'for' Ident '=' Expr ':' Expr ListStmt 'end' { AbsRomeo.For () $2 $4 $6 (reverse $7) }
     | 'for' Ident 'in' Ident ListStmt 'end' { AbsRomeo.ForIn () $2 $4 (reverse $5) }
     | 'break' ';' { AbsRomeo.Break () }
     | 'continue' ';' { AbsRomeo.Cont () }
     | 'function' Ident '(' ListIdent ')' ListStmt 'end' { AbsRomeo.Func () $2 $4 (reverse $6) }
     | 'return' Expr ';' { AbsRomeo.Ret () $2 }
     | 'return' ';' { AbsRomeo.VRet () }
     | 'Yield' Expr ';' { AbsRomeo.Yeld () $2 }
     | 'println' '(' Expr ')' ';' { AbsRomeo.Print () $3 }
Item :: { (Item ()) }
Item : Ident '=' Expr { AbsRomeo.Init () $1 $3 }
ListItem :: { [Item ()] }
ListItem : Item { (:[]) $1 } | Item ',' ListItem { (:) $1 $3 }
ElIfs :: { (ElIfs ()) }
ElIfs : ElIf ElIfs { AbsRomeo.CondElIfs () $1 $2 }
      | {- empty -} { AbsRomeo.NilElif () }
ElIf :: { (ElIf ()) }
ElIf : 'elseif' Expr ListStmt { AbsRomeo.CondElIf () $2 (reverse $3) }
List :: { (List ()) }
List : '[' ListExpr ']' { AbsRomeo.Lis1 () $2 }
     | '[' Expr ':' Expr ']' { AbsRomeo.Lis2 () $2 $4 }
     | '[' Expr 'for' Ident 'in' Expr ':' Expr ']' { AbsRomeo.Lis3 () $2 $4 $6 $8 }
     | '[' Expr 'for' Ident 'in' Ident ']' { AbsRomeo.Lis4 () $2 $4 $6 }
Expr7 :: { Expr () }
Expr7 : Ident { AbsRomeo.EVar () $1 }
      | Integer { AbsRomeo.ELitInt () $1 }
      | List { AbsRomeo.ELitLis () $1 }
      | 'True' { AbsRomeo.ELitTrue () }
      | 'False' { AbsRomeo.ELitFalse () }
      | 'apply' Ident '(' ListExpr ')' { AbsRomeo.EApp () $2 $4 }
      | 'generator' '(' Ident ')' { AbsRomeo.EGen () $3 }
      | 'take' Ident { AbsRomeo.ETake () $2 }
      | Ident '[' Expr ':' Expr ']' { AbsRomeo.ESlice () $1 $3 $5 }
      | '{' ListIdent '}' '->' '{' Expr '}' { AbsRomeo.EAnon () $2 $6 }
      | String { AbsRomeo.EString () $1 }
      | '(' Expr ')' { $2 }
Expr6 :: { Expr () }
Expr6 : Ident '[' Expr ']' { AbsRomeo.EElem () $1 $3 }
      | '-' Expr7 { AbsRomeo.Neg () $2 }
      | '!' Expr7 { AbsRomeo.Not () $2 }
      | Expr7 { $1 }
Expr5 :: { Expr () }
Expr5 : Expr5 '^' Expr6 { AbsRomeo.Pow () $1 $3 } | Expr6 { $1 }
Expr4 :: { Expr () }
Expr4 : Expr4 '*' Expr5 { AbsRomeo.EMul () $1 $3 }
      | Expr4 '/' Expr5 { AbsRomeo.EDiv () $1 $3 }
      | Expr4 '%' Expr5 { AbsRomeo.EMod () $1 $3 }
      | Expr5 { $1 }
Expr3 :: { Expr () }
Expr3 : Expr3 '+' Expr4 { AbsRomeo.EAdd () $1 $3 }
      | Expr3 '-' Expr4 { AbsRomeo.ESub () $1 $3 }
      | Expr4 { $1 }
Expr2 :: { Expr () }
Expr2 : Expr2 RelOp Expr3 { AbsRomeo.ERel () $1 $2 $3 }
      | Expr3 { $1 }
Expr1 :: { Expr () }
Expr1 : Expr2 '&&' Expr1 { AbsRomeo.EAnd () $1 $3 } | Expr2 { $1 }
Expr :: { (Expr ()) }
Expr : Expr1 '||' Expr { AbsRomeo.EOr () $1 $3 } | Expr1 { $1 }
ListExpr :: { [Expr ()] }
ListExpr : {- empty -} { [] }
         | Expr { (:[]) $1 }
         | Expr ',' ListExpr { (:) $1 $3 }
ListIdent :: { [Ident] }
ListIdent : {- empty -} { [] }
          | Ident { (:[]) $1 }
          | Ident ',' ListIdent { (:) $1 $3 }
Asg :: { (Asg ()) }
Asg : '=' { AbsRomeo.Eq () }
    | '+=' { AbsRomeo.PlEq () }
    | '-=' { AbsRomeo.MnEq () }
    | '*=' { AbsRomeo.MulEq () }
    | '/=' { AbsRomeo.DivEq () }
    | '^=' { AbsRomeo.PowEq () }
AddOp :: { (AddOp ()) }
AddOp : '+' { AbsRomeo.Plus () } | '-' { AbsRomeo.Minus () }
MulOp :: { (MulOp ()) }
MulOp : '*' { AbsRomeo.Times () }
      | '/' { AbsRomeo.Div () }
      | '%' { AbsRomeo.Mod () }
RelOp :: { (RelOp ()) }
RelOp : '<' { AbsRomeo.LTH () }
      | '<=' { AbsRomeo.LE () }
      | '>' { AbsRomeo.GTH () }
      | '>=' { AbsRomeo.GE () }
      | '==' { AbsRomeo.EQU () }
      | '!=' { AbsRomeo.NE () }
{

returnM :: a -> Err a
returnM = return

thenM :: Err a -> (a -> Err b) -> Err b
thenM = (>>=)

happyError :: [Token] -> Err a
happyError ts =
  Bad $ "syntax error at " ++ tokenPos ts ++ 
  case ts of
    [] -> []
    [Err _] -> " due to lexer error"
    _ -> " before " ++ unwords (map (id . prToken) (take 4 ts))

myLexer = tokens
}

